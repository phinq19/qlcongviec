<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEAIACoJQAAFgAAACgAAAAwAAAAYAAAAAEAIAAAAAAAACQAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAEAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABQAAAAUAAAAGAAAABwAA
        AAcAAAAHAAAABgAAAAYAAAAFAAAABAAAAAQAAAADAAAAAgAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAABAAAAAcAAAAKAAAADAAA
        AA8AAAAQAAAAEQAAABEAAAARAAAAEAAAABAAAAAOAAAADQAAAAsAAAAJAAAACAAAAAYAAAAFAAAABAAA
        AAMAAAADAAAAAwAAAAIAAAACAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAAGAAAACgAA
        AA8AAAAUAAAAGAAAABsAAAAdAAAAHgAAAB4AAAAeAAAAHgAAAB0AAAAbAAAAGgAAABgAAAAWAAAAFAAA
        ABEAAAAOAAAADAAAAAsAAAAKAAAACQAAAAgAAAAHAAAABgAAAAQAAAADAAAAAgAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAA
        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
        ABAAAAAJAAAABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUVJSuHeNof+HkJn/VGJ0/ylC
        Zv8pVX3/EFuM/w5aj/8Oc7n/E4jX/xeX6v8Wkd7/Fp71/xmh9/8Vov3/FqX//xep//8YrP//GK7//xmw
        //8Xr///wuX//7jc//+u0/v/eLLh/1+j1v9Qj8H/TIGx/0t2pv87a5X/NWSB/09of/8QFyBuAAAAKEBB
        RZzVwa77oJCC2gAAABYAAAANAAAABwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQkJFFxh
        ZdaBnrj/doeV/1Fhd/9KW3f/OWiN/yJZg/8KY6P/EX3D/xaU5/8XleL/FqD4/xik/f8Xp///GKz//xit
        //8YsP//GbP//xqz//8as///J6Hj/zi1+f+x2Pj/mr7X/4SZsP9iepz/U3CY/1Bwlf9FXXn/QFVm/0pb
        cP4NEBREAAAAIUtPUq+2ppjqXVhVswAAABwAAAASAAAACgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABAQECNkamzfgqK+/3eOof9cbn3/ZXyX/1Rriv8NXZX/Cmim/xOF0P8Vi9X/Fp71/xWg
        +/8Wo///Fqj//xet//8Zsf//GbP//xy1//8dt///IaXi/4nP+f+ayvP/j7LM/26JnP9NZ37/TWGD/1Nn
        hP9XZnz/UWJw/zxJX+cCAgIaHR4fUVtZW6mFfXbIIyMjaQAAACAAAAAWAAAADAAAAAUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwbaW1w6pOqvv+Sqb3/XXKC/193lP8uYIz/FF6U/wpl
        pv8MbK3/D4PQ/xSU6P8XoPf/GKb7/xqt/P8csf7/HbH//yC0/f8/vv3/p9z7/5nQ+/+Ruub/ZKXR/2d9
        jP9DW3L/R1hz/2R5jv9ea3z/ZHWC/y86Ta0ICQkjKiwuWk9IQ2g0MzNxAQEBJQAAAB8AAAAXAAAADQAA
        AAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKTVIlXN7hP+lsLj/r8LR/2d8
        jP9Sa4H/QFly/whViP8DR3T/CFyN/xF9v/8Xm/H/Gaj9/x2y/f8gtP//IbT//x+2//8ktv//gMn0/6HJ
        7/84n+T/HqLz/1p/nf9IZ4L/UYqs/297if9fbHj/UWJ2/0NHTqoGBgYZHBkXJhYVFCoBAQEYAAAAHQAA
        ABwAAAAUAAAACwAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgoPKzZQ
        cfdSdov/qa6v/8fT2/+ElKD/UG2A/ylxnf8JV4f/CFOB/wddnf8Lc77/FZDf/xyq+v8fs///ILb//x6x
        //8crP//NqPi/1iv6v8gn/D/S5rU/1J+qf9vhpr/a6jH/4CKmP9VaHj/UF52/19oc/9ybWrPERERNQAA
        AAsAAAATAAAAGAAAABYAAAAPAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAB8uQY4kY4f/P3aW/5WYm//P19z/s8DJ/2d3hP9Ebon/KHCc/wlipf8JVoT/Cl2N/xF0
        r/8Ykdn/HJ/t/x6k9P8dovT/G47T/x2h8v8dnun/X5S+/2KMr/98nLb/gpOi/2Jyhv9IXXb+Ki01hlpe
        YNNQW2j/hX178h8fH1oAAAARAAAAEQAAAA8AAAAKAAAABQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMEBhE1VHPjNHOW/zd2m/9ripv/wcfH/+Pr7f+ttbz/Y3SB/z9z
        lP8ic6X/DF+Q/w1chf8TXYX/MmJ+/zt3m/8eg8D/F3m0/xyU4f8dk9f/I5TZ/1+Lsv9YeJ//WXGQ/0Nj
        gv8lMkKhAAAAGAYGBh9GR0icT1lk/315d/orKilrAAAACwAAAAcAAAAFAAAAAgAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKDhMvPV588EZ4lf9IhKX/TpS1/4Gj
        s//f4d7/7/Lz/7S5v/9qeob/RXSQ/y59qf8Za5b/Hl1//x9Xdv8PWoX/EFmE/xV5t/8ZerP/G3y3/0F+
        qf9VcpT/OWWC/x1MZc8DBAQTAAAACwAAAAsAAAALPj48eWltcv+xoY78ICEhVQAAAAMAAAACAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADxggQjZl
        iPdBfJz/T4im/yqRx/8+jLf/oaWl/+vo5f/39/f/xsnM/3yGjP9Rcof/O36l/yB1pP8VZJD/FmWS/xdx
        p/8ZcKP/HXSk/yJ1n/8nb5D/IVZt0AUKDR4AAAADAAAABAAAAAQAAAADAAAAAz0+PoKztq7/f3p27gsL
        CxoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAsVGzYtWnjbPn+j/yuItv8+j7j/coma/2l+kf+epab/5uLe//z7+v/e4N//nJ+i/2l2
        fv9NcoX/O4Wv/ymIu/8oibv/KoSu/yp6nP8jVWq5AwYHDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEB
        AQNhZ2vKdXd4/zk5N3gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFCQsTJkxipDd8ofpAhan/bo2s/4yjvf9zjKP/ZHF8/56d
        nv/X0cz/+vfw//b28v/KzMn/lJaY/3F6f/9feIP/UXuO/zRQXp8JCgoPAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABBQUGHamts/2FdWq8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0VGysjRlygOXOX90qB
        pP9Mg6T/aJqz/3adtf98mK3/lJ6o/6u7wf/i4Nn//fnw//X08P/U1NL/q6yp/4iKiP9ucXHuWFpYxEJC
        QpYxMjJyJSUlVB0eH0YeHh5EJCQkV0BAQZllZmb1eHZy/1JOS4oAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABwoMFhQhK00tRVWKO2R8vklyitI8eZbTO26JxUJofbQ7TleFPzw5WIeAd5vJwbjg8eri/fXy
        6//k49//xsfC/6epo/+PkYv/fH96/29xbf9oamj/ZGZm/2doaP9/e3f/e3Zw2QwMDBoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAABAQEBGRgXJkhEPl51b2eUmZGKwLOro+a6sar9tqyj/rarn/+1qpr+sKSW+5KFedNLRkOEBwcHEQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEExMSGBgXFiINDAwVAQEBAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8AD////8AAPAAA////wAAwAAAA///
        AACAAAAAf/8AAAAAAAAf/wAAAAAAAAf/AAAAAAAAA/8AAAAAAAAB/wAAAAAAAAD/AAAAAAAAAD8AAAAA
        AAAAPwAAgAAAAAAPAACAAAAAAAcAAIAAAAAAAwAAgAAAAAABAACAAAAAAAEAAIAAAAAAAAAAgAAAAAAA
        AACAAAAAAAAAAIAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAD4AAAAAAAAAPwA
        AAAAAAAA/AAAAAAAAAD+AAAAAAAAAP8AAAAAAAAA/4AAAAAAAAD/wAAAAAAAAP/AAAAAAAAA/+AAAAAA
        AAD/4AAAAAAAAP/wAAAAAQAA//gAAAAHAAD//AAAH4cAAP/+AAA/xwAA//+AAAAHAAD//+AAAAcAAP//
        //wADwAA//////B/AAD///////8AAP///////wAA////////AAD///////8AAP///////wAA////////
        AAA=
</value>
  </data>
</root>